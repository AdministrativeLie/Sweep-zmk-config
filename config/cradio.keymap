// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// Home row mods macro

#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        FN {
            bindings = <&mo 4>;
            key-positions = <27 28>;
            layers = <0 1 2 3 4>;
        };

        APPGUI {
            bindings = <&kp LEFT_GUI>;
            key-positions = <25 26>;
            layers = <0 1 2 3 4>;
        };

        CRT {
            bindings = <&kp LCTRL>;
            key-positions = <15 16>;
            layers = <0 4 3 2 1>;
        };

        ALT {
            bindings = <&kp LEFT_ALT>;
            key-positions = <16 17>;
            layers = <0 1 2 3 4>;
        };

        LOOP {
            bindings = <&kp LA(RCTRL)>;
            key-positions = <15 16 17>;
        };
    };

    macros {
        mpApp: mpApp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp P &kp LS(A) &kp P &kp P>;
            label = "MPAPP";
        };

        mpDoc: mpDoc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp P &kp LS(D) &kp O &kp C>;
            label = "MPDOC";
        };

        open: open {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp P &kp E &kp N>;
            label = "OPEN";
        };

        ls: ls {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp S>;
            label = "LS";
        };

        cd: cd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp D>;
            label = "CD";
        };

        onepass: onepass {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp P &kp LS(A) &kp P &kp P &kp SPACE &kp N1 &kp LS(P) &kp A &kp S &kp S &kp W &kp O &kp R &kp D>;
            label = "ONEPASS";
        };

        icloud: icloud {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp LS(C) &kp L &kp O &kp U &kp D>;
            label = "ICLOUD";
        };

        code: code {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp D &kp E>;
            label = "CODE";
        };

        browse: browse {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(B) &kp R &kp O &kp W &kp S &kp E &kp R>;
            label = "BROWSE";
        };

        cmd: cmd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(N0))>;
            label = "CMD";
        };

        closecmd: closecmd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(W)>;
            label = "CLOSECMD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE1 {
            bindings = <
&kp Q  &kp W  &kp E  &kp R      &kp T        &kp Y          &kp U      &kp I  &kp O  &kp SLASH
&kp A  &kp S  &kp D  &kp F      &kp G        &kp H          &kp J      &kp K  &kp L  &kp P
&kp Z  &kp X  &kp C  &kp V      &kp B        &kp N          &kp M      &mo 3  &mo 2  &mo 1
                     &kp LSHFT  &kp SPACE    &kp BACKSPACE  &kp ENTER
            >;
        };

        ARROW {
            bindings = <
&kp ESC   &kp LC(LEFT)      &kp UP      &kp LC(RIGHT)      &none              &none       &none   &none  &none  &none
&kp TAB   &kp LEFT          &kp RIGHT   &kp DOWN           &kp F9             &none       &none   &none  &none  &trans
&kp CAPS  &kp C_PLAY_PAUSE  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &none       &none   &none  &none  &none
                                        &trans             &trans             &kp DELETE  &trans
            >;
        };

        NUM {
            bindings = <
&kp ESC   &kp N1  &kp N2  &kp N3     &none        &none     &none    &none   &none   &none
&kp TAB   &kp N4  &kp N5  &kp N6     &none        &none     &trans   &trans  &trans  &trans
&kp CAPS  &kp N7  &kp N8  &kp N9     &kp N0       &none     &none    &none   &none   &none
                          &kp LSHFT  &kp SPACE    &kp BSPC  &kp RET
            >;
        };

        SYMB {
            bindings = <
&kp ESC   &kp GRAVE  &kp MINUS  &kp EQUAL  &none        &none     &none    &none   &none   &none
&kp TAB   &kp LBKT   &kp RBKT   &kp BSLH   &kp SEMI     &none     &trans   &trans  &trans  &trans
&kp CAPS  &kp DOT    &kp COMMA  &kp FSLH   &kp SQT      &none     &none    &none   &none   &none
                                &kp LSHFT  &kp SPACE    &kp BSPC  &kp RET
            >;
        };

        FN {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &trans     &kp F11  &kp F12  &trans  &trans  &trans
&trans  &kp F4  &kp F5  &kp F6  &trans     &trans   &trans   &trans  &trans  &trans
&trans  &kp F7  &kp F8  &kp F9  &kp F10    &trans   &trans   &trans  &trans  &trans
                        &trans  &trans     &trans   &trans
            >;
        };
    };
};
